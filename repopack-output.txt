This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-30T13:24:51.548Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
介绍
退货策略
docs/eleven_lab_docs.md
package.json
public/app.js
public/index.html
README.md
server.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Dependencies
node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log
package-lock.json
yarn.lock

# Environment variables
.env
.env.local
.env.*.local

# IDE/Editor specific
.vscode/
.idea/
*.swp
*.swo
.DS_Store

# Logs
logs/
*.log

# Build output
dist/
build/
out/

# Testing
coverage/

# Temporary files
tmp/
temp/

# Debug
.debug/

# Misc
.cache/
.project
.settings/
*.sublime-workspace
*.sublime-project

================
File: 介绍
================
# 科技装备商店产品详细介绍

## 1. 高级无线耳机
- **型号**: TechPro WH-1000
- **价格**: ¥1399
- **主要特点**:
  - 主动降噪技术，可降低95%的环境噪音
  - 40小时超长续航
  - 蓝牙5.2技术，支持多设备连接
  - 触控操作，支持语音助手
- **适用场景**:
  - 日常通勤
  - 办公室工作
  - 长途旅行
  - 运动健身
- **技术规格**:
  - 频率响应：4Hz-40,000Hz
  - 驱动单元：40mm
  - 防水等级：IPX4
- **售后服务**:
  - 2年质保
  - 15天无理由退换
  - 免费软件升级

## 2. 智能健康手表
- **型号**: HealthWatch Pro
- **价格**: ¥999
- **主要特点**:
  - 24小时心率监测
  - 血氧饱和度检测
  - 睡眠质量分析
  - 30种运动模式
  - GPS定位功能
- **核心功能**:
  - 来电短信提醒
  - 压力监测
  - 久坐提醒
  - 女性健康跟踪
- **技术规格**:
  - 1.4英寸AMOLED显示屏
  - 防水等级：5ATM
  - 续航时间：14天
- **适用人群**:
  - 运动爱好者
  - 健康管理人士
  - 商务人士

## 3. 无线蓝牙耳塞
- **型号**: SoundPods Air
- **价格**: ¥599
- **主要特点**:
  - 主动降噪
  - 通透模式
  - 触控操作
  - 无线充电
- **技术规格**:
  - 单次续航：6小时
  - 充电仓总续航：24小时
  - 蓝牙版本：5.2
  - 防水等级：IPX5
- **场景应用**:
  - 运动健身
  - 通勤使用
  - 视频会议
- **包装内容**:
  - 耳机主体
  - 充电仓
  - 3对耳帽
  - Type-C充电线

## 4. 游戏机械键盘
- **型号**: GameMaster K1
- **价格**: ¥499
- **主要特点**:
  - 机械青轴
  - RGB背光
  - 全键无冲
  - 可编程宏
- **技术规格**:
  - 104键标准布局
  - 铝合金面板
  - USB接口
  - 1000Hz轮询率
- **适用场景**:
  - 电竞游戏
  - 办公打字
  - 编程开发
- **特别功能**:
  - 自定义灯效
  - 快捷多媒体键
  - 可拆卸手托

## 5. 专业游戏鼠标
- **型号**: ProGamer M2
- **价格**: ¥299
- **主要特点**:
  - 16000DPI光学传感器
  - 8个可编程按键
  - RGB灯效
  - 人体工学设计
- **技术参数**:
  - 1ms响应时间
  - 50G加速度
  - 可调节重量系统
  - 特氟龙脚贴
- **适用场景**:
  - FPS游戏
  - MOBA游戏
  - 图片处理
  - 日常办公
- **包装内容**:
  - 游戏鼠标
  - 备用脚贴
  - 说明书
  - 调节配重块

## 6. 曲面电竞显示器
- **型号**: CurveMax G27
- **价格**: ¥2199
- **主要特点**:
  - 27英寸曲面屏
  - 2K分辨率（2560x1440）
  - 144Hz刷新率
  - 1ms响应时间
- **技术规格**:
  - VA面板
  - 3000:1对比度
  - 178°广视角
  - HDR400认证
- **接口配置**:
  - 2×HDMI 2.0
  - 1×DisplayPort 1.4
  - 1×音频输出
- **特色功能**:
  - 游戏画面同步技术
  - 护眼模式
  - 画中画
  - 低蓝光
- **适用场景**:
  - 电竞游戏
  - 视频剪辑
  - 图片处理
  - 日常办公

## 购买建议
- 所有产品支持以下支付方式：
  - 支付宝
  - 微信支付
  - 银联卡
  - 信用卡分期
- 配送服务：
  - 全国包邮
  - 支持当日达（部分城市）
  - 支持上门安装（显示器）
- 售后保障：
  - 7天无理由退换
  - 15天价格保护
  - 一年质保
  - 终身技术支持

================
File: 退货策略
================
# 科技装备商店法律条款与退换货政策

## 一、法律条款

### 1. 知识产权声明
- 本店所有商品均为原装正品，享有合法的销售权
- 所有产品商标归属各自品牌所有
- 网站内容、图片等知识产权归本店所有

### 2. 隐私政策
- 严格遵守《中华人民共和国消费者权益保护法》
- 用户信息采集与使用：
  - 仅收集必要的用户信息
  - 加密存储所有个人信息
  - 不会向第三方出售用户数据
  - 用户有权查询、更正或删除个人信息

### 3. 价格及支付政策
- 显示价格包含增值税
- 实行明码标价，禁止虚假促销
- 支持正规支付渠道：
  - 支付宝
  - 微信支付
  - 银联卡
  - 信用卡
- 分期付款需通过信用审核

### 4. 配送责任
- 物流损坏由商家承担责任
- 运输过程全程保险
- 签收前请检查包装完整性
- 对贵重物品提供专人配送服务

## 二、退换货政策

### 1. 7天无理由退货
- **适用条件**：
  - 商品及包装保持原状
  - 不影响二次销售
  - 配件齐全，不缺失
  - 有完整购物凭证
- **不适用情况**：
  - 拆封后的耳机耳塞类产品
  - 激活的数字产品
  - 个人定制商品
  - 已经使用过的耗材

### 2. 15天质量问题换货
- **换货条件**：
  - 商品存在质量问题
  - 功能不符合说明书描述
  - 收到商品与订单不符
- **换货流程**：
  - 提交换货申请
  - 客服确认问题
  - 寄回商品
  - 商家承担来回运费

### 3. 保修服务
- **保修期限**：
  - 耳机、键盘、鼠标：一年质保
  - 显示器：三年质保
  - 智能手表：两年质保
- **保修范围**：
  - 正常使用下的性能故障
  - 材料或工艺缺陷
  - 系统软件问题
- **不在保修范围**：
  - 人为损坏
  - 未经授权的维修
  - 自然损耗
  - 不当使用造成的损坏

### 4. 退换货流程
1. **申请阶段**：
   - 在线提交申请
   - 说明退换原因
   - 上传商品照片
   - 提供购物凭证

2. **审核阶段**：
   - 客服24小时内响应
   - 确认是否符合条件
   - 提供退货地址

3. **寄回阶段**：
   - 合理包装商品
   - 附上退货单
   - 使用可跟踪的快递
   - 保留快递单号

4. **处理阶段**：
   - 商家收货检测
   - 确认无误后处理
   - 退款至原支付账户
   - 换货重新发出

### 5. 特殊情况处理
- **开箱即损**：
  - 24小时内反馈
  - 提供开箱视频
  - 立即安排换货
  
- **批量故障**：
  - 启动专项处理方案
  - 优先处理
  - 可能适用额外补偿

- **节假日政策**：
  - 退换货时效顺延
  - 提供在线技术支持
  - 保修不受节假日影响

### 6. 售后服务承诺
- 7×24小时在线客服
- 技术支持热线
- 定期售后回访
- VIP客户优先处理
- 到府维修服务（限部分产品）

## 三、消费者权益保护
- 支持消费者监督
- 接受市场监督管理
- 遵守电商平台规则
- 加入消费者协会
- 提供投诉渠道：
  - 客服热线：400-XXX-XXXX
  - 邮箱：service@techgear.com
  - 在线客服
  - 官方微信公众号

================
File: docs/eleven_lab_docs.md
================
Overview
Conversational AI: deploy customized, interactive voice agents in minutes.

​
What is ElevenLabs Conversational AI?
ElevenLabs Conversational AI is a platform for deploying customized, interactive voice agents. Our Conversational AI orchestration platform combines

Speech to Text (the ears)
LLM (the brain)
Text to Speech (the voice)
along with built in interruption handling, turn taking logic, and knowledge bases. All together, our platform makes it easy to create an interactive agents that you and your users can talk to like a person.

Companies and creators use our Conversational AI orchestration platform to create:

Customer service reps that are trained on company help docs that can support customers with complex queries.
Virtual assistants that help users with tasks like scheduling, reminders, and information lookup.
Retail assistants that can handle product searches, recommendations, and order tracking.
Interactive game characters that can tell stories and guide players as they explore custom worlds.
​
Configuring your agent
To get started, head to Conversational AI.

When creating your agent, you’ll be prompted with the option to start with a blank template or you can choose one of our preset templates. The only difference is that the preset templates come with the first message and system prompt filled out to match the relevant personas.

​
Setting up your LLM, System Prompt, and Knowledge Base
​
Choosing your LLM
With our Conversational AI Platform, you can select from the leading models from Anthropic, OpenAI and Google. Soon, you’ll also be able to bring your own custom LLM via our Server integration.

There is some tradeoff between model performance and latency, so we recommend testing a few options to see which best fits your use case.

​
System Prompt Best Practices

Your system prompt will inform your agent’s behavior, style, and demeanor. Here are some example prompts we’ve had success with:

(1) Customer Support Agent Prompt

You are a technical support agent named Alex. You will try to answer any questions that the user might have about the Elevenlabs service. You will be given documentation on the Elevenlabs product and should only use this information to answer questions about the Elevenlabs product. You should be helpful, friendly and relatively professional. If you’re unable to answer the question you should point the user to email support@elevenlabs.io.

Your output will be read by a text to speech service so should be formatted as it is pronounced. For example: instead of outputting “please contact support@elevenlabs.io” you should output “please contact support at elevenlabs dot I O”. Do not format your text response with bullet points, bold or headers. Do not return long lists but instead summarise them and ask which ones the user is interested in. Do not return code samples but instead suggest the user views the code samples in our documentation on our website. Return the response directly, do not start responses with “Agent:” or anything similar.

Answer succinctly in a couple of sentences and let the user guide you on where to give more detail. DO not respond with bullet point lists

(2) Aristotle Prompt

You are Aristotle, the ancient Greek philosopher. Speak as though you are conversing with students in the Lyceum, explaining your views on ethics, politics, and the nature of reality. Guide your audience with thoughtful questions, analogies, and logical arguments. Stay true to your persona—analytical, articulate, and rooted in reason—offering practical wisdom for a virtuous and meaningful life.

(3) Librarian Prompt

You are a librarian named Jessica. You are very friendly and enthusiastic really want to help people find a book they will love. You are in charge of a library of books and have been provided with a full list of books and their authors. Only recommend books that are currently in your library. Respond in 2-4 sentences in most cases.

If someone asks you about a book you do not have, say that you do not have it and recommend similar novels. Only recommend books that are in your library.

​
Configuring your Knowledge Base
Your knowledge base is additional information you can provide your agent on top of the base understanding of the LLM you selected.

Non-enterprise users are limited to 5 files or links and up to 20MB total. Contact our sales team to discuss an enterprise plan to raise your limit.

​
Choosing a Voice
You can use Conversational AI with any of our default or library voices, or even with a custom voice clone. For the best results, we recommend selecting one of our Default Voices that were trained for conversational use cases, like Chris or Jessica.

​
Success Criteria and Data Collection
​
Success Criteria
Use success criteria to specify custom prompts you’d like to run on call transcripts to analyze the results. Some examples:

Title: handled_inquiry

Prompt: The agent was able to answer all of the queries from the user without having to refer them to a further support channel

Title: pleasant_experience

Prompt: The user didn’t react negatively to any of the provided answers from the agent

​
Data Collection
Use Data Collection to extract relevant information from call transcripts. Some examples:

Title: conversation_topic

Prompt: This value should be a single entry from the following list which best represents the main conversation topic: “websocket”, “model_features”, “voices”, “pricing”, “accent_issues”, “api”

Title: call_type

Prompt: This should take one of the three values: “bug_report”, “feature_request”, “support_issue"

"feature_request” should be returned if the user is asking for a feature that doesn’t currently exist

”support_issue” should be returned if the user is asking for support with existing functionality or needs help with known issues that are detailed in the documentation

”bug_report” should be returned if the user is reporting a new bug that was unknown by the agent


​
Testing your Agent and Reviewing Call History
You can demo your agent by talking to it within our dashboard and review the call recording and transcript in the History tab.


​
Deploying the Widget
Once you’ve tested your agent and you’re ready to deploy it to your site, you can either

(1) Head to the “Widget” subnav, customize your widget, and grab the custom embed code for your site.

(2) Interact with your agent through our SDK and build your own custom interface.

JavaScript SDKs
Client SDK
Conversational AI SDK: deploy customized, interactive voice agents in minutes.

Also see the Conversational AI overview
​
Installation
Install the package in your project through package manager.


npm install @11labs/client
# or
yarn add @11labs/client
# or
pnpm install @11labs/client
​
Usage
This library is primarily meant for development in vanilla JavaScript projects, or as a base for libraries tailored to specific frameworks. It is recommended to check whether your specific framework has it’s own library. However, you can use this library in any JavaScript-based project.

​
Initialize conversation
First, initialize the Conversation instance:


const conversation = await Conversation.startSession(options);
This will kick off the websocket connection and start using microphone to communicate with the ElevenLabs Conversational AI agent. Consider explaining and allowing microphone access in your apps UI before the Conversation kicks off:


// call after explaning to the user why the microphone access is needed
await navigator.mediaDevices.getUserMedia();
​
Session configuration
The options passed to startSession specifiy how the session is established. There are two ways to start a session:

Using Agent ID
Agent ID can be acquired through ElevenLabs UI. For public agents, you can use the ID directly:


const conversation = await Conversation.startSession({
  agentId: "<your-agent-id>",
});
Using a signed URL
If the conversation requires authorization, you will need to add a dedicated endpoint to your server that will request a signed url using the ElevenLabs API and pass it back to the client.

Here’s an example of how it could be set up:


// Node.js server

app.get("/signed-url", yourAuthMiddleware, async (req, res) => {
  const response = await fetch(
    `https://api.elevenlabs.io/v1/convai/conversation/get_signed_url?agent_id=${process.env.AGENT_ID}`,
    {
      method: "GET",
      headers: {
        // Requesting a signed url requires your ElevenLabs API key
        // Do NOT expose your API key to the client!
        "xi-api-key": process.env.XI_API_KEY,
      },
    }
  );

  if (!response.ok) {
    return res.status(500).send("Failed to get signed URL");
  }

  const body = await response.json();
  res.send(body.signed_url);
});

// Client

const response = await fetch("/signed-url", yourAuthHeaders);
const signedUrl = await response.text();

const conversation = await Conversation.startSession({ signedUrl });
​
Optional callbacks
The options passed to startSession can also be used to register optional callbacks:

onConnect - handler called when the conversation websocket connection is established.
onDisconnect - handler called when the conversation websocket connection is ended.
onMessage - handler called when a new text message is received. These can be tentative or final transcriptions of user voice, replies produced by LLM. Primarily used for handling conversation transcription.
onError - handler called when an error is encountered.
onStatusChange - handler called whenever connection status changes. Can be connected, connecting and disconnected (initial).
onModeChange - handler called when a status changes, eg. agent switches from speaking to listening, or the other way around.
​
Return value
startSession returns a Conversation instance that can be used to control the session. The method will throw an error if the session cannot be established. This can happen if the user denies microphone access, or if the websocket connection fails.

endSession
A method to manually end the conversation. The method will end the conversation and disconnect from websocket. Afterwards the conversation instance will be unusable and can be safely discarded.


await conversation.endSession();
getId
A method returning the conversation ID.


const id = conversation.geId();
setVolume
A method to set the output volume of the conversation. Accepts object with volume field between 0 and 1.


await conversation.setVolume({ volume: 0.5 });
getInputVolume / getOutputVolume
Methods that return the current input/output volume on a scale from 0 to 1 where 0 is -100 dB and 1 is -30 dB.


const inputVolume = await conversation.getInputVolume();
const outputVolume = await conversation.getOutputVolume();
getInputByteFrequencyData / getOutputByteFrequencyData
Methods that return Uint8Arrays containg the current input/output frequency data. See AnalyserNode.getByteFrequencyData for more information.

================
File: package.json
================
{
  "type": "module",
  "dependencies": {
    "@11labs/client": "latest",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "node-fetch": "^3.3.2"
  },
  "name": "eleven_labs",
  "version": "1.0.0",
  "main": "index.js",
  "directories": {
    "doc": "docs"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}

================
File: public/app.js
================
let conversation = null;
const startButton = document.getElementById('startButton');
const endButton = document.getElementById('endButton');
const volumeSlider = document.getElementById('volumeSlider');
const statusDiv = document.getElementById('status');
const transcriptDiv = document.getElementById('transcript');

// Update UI with new messages
function addMessage(text, sender) {
  const messageDiv = document.createElement('div');
  messageDiv.textContent = `${sender}: ${text}`;
  transcriptDiv.appendChild(messageDiv);
  transcriptDiv.scrollTop = transcriptDiv.scrollHeight;
}

async function startConversation() {
  try {
    // Request microphone access
    await navigator.mediaDevices.getUserMedia({ audio: true });

    // Fetch the signed URL from the server
    const response = await fetch('/signed-url');
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.details || 'Failed to get signed URL');
    }

    const signedUrl = data.signedUrl;
    if (!signedUrl) {
      throw new Error('No signed URL received from server');
    }

    // Check if the SDK is loaded
    if (typeof window.ElevenLabs === 'undefined') {
      throw new Error('ElevenLabs SDK not loaded properly');
    }

    // Initialize the conversation using the SDK
    conversation = await window.ElevenLabs.Conversation.startSession({
      signedUrl,
      onConnect: () => {
        statusDiv.textContent = 'Status: Connected';
        startButton.disabled = true;
        endButton.disabled = false;
      },
      onDisconnect: () => {
        statusDiv.textContent = 'Status: Disconnected';
        startButton.disabled = false;
        endButton.disabled = true;
      },
      onMessage: (message) => {
        addMessage(message.text, message.sender);
      },
      onError: (error) => {
        console.error('Conversation error:', error);
        statusDiv.textContent = `Status: Error - ${error.message}`;
      },
      onStatusChange: (status) => {
        statusDiv.textContent = `Status: ${status}`;
      },
      onModeChange: (mode) => {
        console.log('Mode changed:', mode);
      },
    });

    console.log('Conversation started successfully');
  } catch (error) {
    console.error('Failed to start conversation:', error);
    statusDiv.textContent = `Status: Error - ${error.message}`;
  }
}

async function endConversation() {
  if (conversation) {
    try {
      await conversation.endSession();
      conversation = null;
      statusDiv.textContent = 'Status: Disconnected';
      startButton.disabled = false;
      endButton.disabled = true;
    } catch (error) {
      console.error('Error ending conversation:', error);
      statusDiv.textContent = `Status: Error - ${error.message}`;
    }
  }
}

// Event Listeners
startButton.addEventListener('click', startConversation);
endButton.addEventListener('click', endConversation);
volumeSlider.addEventListener('input', (e) => {
  if (conversation) {
    conversation.setVolume({ volume: e.target.value / 100 });
  }
});

// Debug logging
console.log('App.js loaded and initialized');
console.log('SDK availability:', {
  ElevenLabs: window.ElevenLabs,
  Conversation: window.ElevenLabs?.Conversation
});

================
File: public/index.html
================
<!DOCTYPE html>
<html>
<head>
  <title>科技装备商店 - 您的一站式购物平台</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
    }

    header {
      background: #333;
      color: white;
      text-align: center;
      padding: 1rem;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .products {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      padding: 20px 0;
    }

    .product-card {
      border: 1px solid #ddd;
      padding: 15px;
      text-align: center;
      border-radius: 8px;
    }

    .product-card img {
      max-width: 200px;
      height: 200px;
    }

    .product-card h3 {
      margin: 10px 0;
    }

    .price {
      color: #2ecc71;
      font-size: 1.2rem;
      font-weight: bold;
    }

    .buy-btn {
      background: #3498db;
      color: white;
      padding: 8px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-top: 10px;
    }

    .buy-btn:hover {
      background: #2980b9;
    }
  </style>
</head>
<body>
  <!-- ElevenLabs Widget -->
  <elevenlabs-convai agent-id="dtAWIAtCh5Vvv1W2Rdlt"></elevenlabs-convai>
  <script src="https://elevenlabs.io/convai-widget/index.js" async type="text/javascript"></script>

  <header>
    <h1>科技装备商店</h1>
    <p>您的AI购物助手随时为您服务！</p>
  </header>

  <div class="container">
    <div class="products">
      <div class="product-card">
        <img src="https://images.unsplash.com/photo-1505740420928-5e560c06d30e" alt="无线耳机">
        <h3>高级无线耳机</h3>
        <p>高品质音效配备降噪功能</p>
        <div class="price">¥1399</div>
        <button class="buy-btn">加入购物车</button>
      </div>

      <div class="product-card">
        <img src="https://images.unsplash.com/photo-1546868871-7041f2a55e12" alt="智能手表">
        <h3>智能健康手表</h3>
        <p>追踪健康数据，保持连接</p>
        <div class="price">¥999</div>
        <button class="buy-btn">加入购物车</button>
      </div>

      <div class="product-card">
        <img src="https://images.unsplash.com/photo-1590658268037-6bf12165a8df" alt="无线耳塞">
        <h3>无线蓝牙耳塞</h3>
        <p>水晶般清晰音质，超长续航</p>
        <div class="price">¥599</div>
        <button class="buy-btn">加入购物车</button>
      </div>

      <div class="product-card">
        <img src="https://images.unsplash.com/photo-1595225476474-87563907a212" alt="机械键盘">
        <h3>游戏机械键盘</h3>
        <p>RGB背光，机械轴体体验</p>
        <div class="price">¥499</div>
        <button class="buy-btn">加入购物车</button>
      </div>

      <div class="product-card">
        <img src="https://images.unsplash.com/photo-1527864550417-7fd91fc51a46" alt="游戏鼠标">
        <h3>专业游戏鼠标</h3>
        <p>高精度传感器，可编程按键</p>
        <div class="price">¥299</div>
        <button class="buy-btn">加入购物车</button>
      </div>

      <div class="product-card">
        <img src="https://images.unsplash.com/photo-1527443224154-c4a3942d3acf" alt="显示器">
        <h3>曲面电竞显示器</h3>
        <p>144Hz刷新率，超广视角</p>
        <div class="price">¥2199</div>
        <button class="buy-btn">加入购物车</button>
      </div>
    </div>
  </div>
</body>
</html>

================
File: README.md
================
# 语音合成网页应用

## 项目简介
这是一个使用 ElevenLabs API 的语音合成网页应用，可以将文本转换为自然的语音。

## 功能特点
- 文本转语音转换
- 多种AI声音选择
- 实时语音预览
- 简洁的用户界面

## 技术栈
- Node.js
- Express.js
- HTML5
- JavaScript
- ElevenLabs API

## 安装说明
1. 克隆仓库

================
File: server.js
================
import express from 'express';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// Verify environment variables are set
if (!process.env.AGENT_ID || !process.env.ELEVEN_LABS_API_KEY) {
  console.error('Missing required environment variables. Please check your .env file.');
  process.exit(1);
}

app.use(express.static('public'));

app.get('/signed-url', async (req, res) => {
  try {
    console.log('Requesting signed URL for agent:', process.env.AGENT_ID);
    
    const response = await fetch(
      `https://api.elevenlabs.io/v1/convai/conversation/get_signed_url?agent_id=${process.env.AGENT_ID}`, // Updated endpoint
      {
        method: 'GET',
        headers: {
          'xi-api-key': process.env.ELEVEN_LABS_API_KEY,
          'Content-Type': 'application/json'
        },
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error('ElevenLabs API error:', {
        status: response.status,
        statusText: response.statusText,
        error: errorText
      });
      throw new Error(`API responded with status ${response.status}: ${errorText}`);
    }

    const data = await response.json();
    console.log('Successfully obtained signed URL');
    res.json({ signedUrl: data.signed_url });
  } catch (error) {
    console.error('Detailed error:', error);
    res.status(500).json({ 
      error: 'Failed to get signed URL', 
      details: error.message 
    });
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  console.log('Using Agent ID:', process.env.AGENT_ID);
});
